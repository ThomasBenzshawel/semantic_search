/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  FirstTimeSetupModal: () => FirstTimeSetupModal,
  ResultModal: () => ResultModal,
  UI_Modal: () => UI_Modal,
  default: () => SemanticSearchPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var path = require("path");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
async function runBackendCMD() {
  const activateScriptPath = path.join(this.app.vault.adapter.basePath, ".obsidian", "plugins", "semantic-search-plugin", "launch_hardcoded.bat");
  const server = (0, import_child_process.spawn)("cmd.exe", ["/C", activateScriptPath]);
  console.log(this.app.vault.adapter.basePath);
  server.stdout.on("data", (stdout) => {
    console.log(`BACKEND OUTPUT (cmd): ${stdout.toString()}`);
  });
  server.stderr.on("data", (stderr) => {
    console.log(`BACKEND ERROR (cmd): ${stderr.toString()}`);
  });
}
var SemanticSearchPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.backendURL = "http://localhost:5000";
    this.warmedUp = false;
  }
  async onload() {
    await this.loadSettings();
    await runBackendCMD();
    this.addRibbonIcon("dice", "SemanticSearch: Run Search", () => {
      checkEmbeddings();
      if (this.warmedUp) {
        new UI_Modal(this.app, getUserInput).open();
      } else {
        new import_obsidian.Notice("Warning: before running the search, please click 'Run Search Startup'");
      }
    });
    const checkEmbeddings = () => {
      fetch(`${this.backendURL}/embeddings_status`, {
        method: "GET",
        mode: "no-cors",
        //unsure if this is necessary for this use case
        headers: {
          "Content-Type": "application/json"
        }
      }).then((response) => response.json()).then((data) => {
        if (data.embeddings_status == "true") {
          this.warmedUp = true;
        } else {
          this.warmedUp = false;
        }
      }).catch((e) => console.log(e));
    };
    this.addRibbonIcon("dice", "SemanticSearch: First time setup (PLEASE READ)", () => {
      new FirstTimeSetupModal(this.app).open();
    });
    this.addRibbonIcon("dice", "SemanticSearch: Run Search Startup (WARNING: WILL EAT UP CPU)", () => {
      fetch(`${this.backendURL}/run_startup`, {
        method: "POST",
        mode: "no-cors",
        //unsure if this is necessary for this use case
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          path: `${this.app.vault.adapter.basePath}/Content`
        })
      }).then(() => {
        this.warmedUp = true;
      }).then(() => {
        new import_obsidian.Notice("Startup complete, ready to search!");
      }).catch((e) => console.log(e));
    });
    const getUserInput = (result, num) => {
      fetch(`${this.backendURL}/get_query`, {
        method: "POST",
        mode: "no-cors",
        //unsure if this is necessary for this use case
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          input: result,
          num_results: num
        })
      });
      getResults();
    };
    const getResults = () => {
      fetch(`${this.backendURL}/return_results`, {
        method: "GET",
        mode: "no-cors",
        //unsure if this is necessary for this use case
        headers: {
          "Content-Type": "application/json"
        }
      }).then((response) => response.json()).then((data) => {
        new ResultModal(this.app, data.results).open();
      }).catch((e) => console.log(e));
    };
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
    const continueRunning = () => {
      fetch(`${this.backendURL}/continue_running`, {
        method: "POST",
        mode: "no-cors",
        //unsure if this is necessary for this use case
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          input: "false"
        })
      });
    };
    continueRunning();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var UI_Modal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.createEl("h1", { text: "SemanticSearch: Enter target term to search for:" });
    new import_obsidian.Setting(contentEl).setName("Term:").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian.Setting(contentEl).setName("Number of responses:").addText((text) => text.onChange((value) => {
      this.num = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result, this.num);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var ResultModal = class extends import_obsidian.Modal {
  constructor(app, result) {
    super(app);
    this.result = result;
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.createEl("h1", { text: "SemanticSearch: Search Results" });
    console.log(typeof this.result);
    console.log(this.result);
    for (const c of this.result) {
      contentEl.createEl("h2", { text: `Doc title: ${c.document_name}` });
      contentEl.createEl("p", { text: c.content });
    }
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var FirstTimeSetupModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.createEl("h1", { text: "SemanticSearch: First Time Setup" });
    contentEl.createEl("p", { text: "Welcome to the first time setup for SemanticSearch!" });
    contentEl.createEl("p", { text: "If you have not used this plugin before, please be sure to follow these instructions." });
    contentEl.createEl("p", { text: "If you do not have Python installed on your machine, please do so -- you can get it from the Microsoft Store, this application was built using Python 3.11." });
    contentEl.createEl("p", { text: "Once you have Python installed, if you do not have it added to your PATH, please do that now (use this if you need help: https://realpython.com/add-python-to-path/#how-to-add-python-to-path-on-windows)." });
    contentEl.createEl("p", { text: "Once you have that set up, as well as installing pip on your machine, please open a command prompt in the 'backend' directory of this plugin, and run 'python pip install venv' if you do not already have the venv library set up. If you do, you can skip straight to running the command 'python -m venv .venv'. Once it has been created, activate it by running '.venv/Scripts/activate.bat'. After activating it, please run 'pip install -r requirements.txt'. The path to the requirements.txt file may need to be adjusted based on your environment." });
    contentEl.createEl("p", { text: "After all of that, please find the 'launch.bat' file (it should be located in the main folder for this plugin), replace the text within the angled brackets (along with the brackets themselves) with the correct information." });
    contentEl.createEl("p", { text: "With all of that out of the way, you should be good to go!" });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
